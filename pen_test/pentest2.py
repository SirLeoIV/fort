from multiprocessing import Pool
import requests
import time
import random
import string
import csv
from datetime import datetime

url = "http://localhost:8080/client"

def generate_random_string(length=10):
    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))

def generate_unique_payload():
    name = f"user_{generate_random_string(10)}"
    password = f"pass_{generate_random_string(10)}"
    return {"name": name[:25], "password": password[:25]}

def send_request(request_id):
    payload = generate_unique_payload()
    start_time = time.time()
    try:
        response = requests.post(url, json=payload)
        elapsed_time = time.time() - start_time
        return {
            "request_id": request_id,
            "timestamp": datetime.now().isoformat(),
            "payload": payload,
            "response_status": response.status_code,
            "response_text": response.text,
            "elapsed_time": elapsed_time
        }
    except requests.exceptions.RequestException as e:
        return {
            "request_id": request_id,
            "timestamp": datetime.now().isoformat(),
            "payload": payload,
            "response_status": "Error",
            "response_text": str(e),
            "elapsed_time": 0
        }

def perform_dos_attack(process_count=4, requests_per_process=25):
    total_requests = process_count * requests_per_process
    print(f"Starting {total_requests} requests using {process_count} processes...")

    with Pool(process_count) as pool:
        results = pool.map(send_request, range(total_requests))
    return results

def save_to_csv(results, filename="dos_attack_metrics.csv"):
    with open(filename, mode="w", newline="") as file:
        writer = csv.DictWriter(file, fieldnames=[
            "request_id", "timestamp", "payload", "response_status", "response_text", "elapsed_time"])
        writer.writeheader()
        writer.writerows(results)

if __name__ == "__main__":
    print("Starting DoS test with multiprocessing...")
    process_count = 50
    requests_per_process = 10

    start_time = time.time()
    results = perform_dos_attack(process_count=process_count, requests_per_process=requests_per_process)
    total_duration = time.time() - start_time

    save_to_csv(results, filename="dos_attack_metrics55.csv")

    successful_requests = len([res for res in results if res["response_status"] != "Error"])
    total_time = sum(res["elapsed_time"] for res in results)
    avg_time_per_request = total_time / successful_requests if successful_requests > 0 else 0
    requests_per_second = successful_requests / total_duration if total_duration > 0 else 0

    print(f"Total requests: {len(results)}")
    print(f"Successful requests: {successful_requests}")
    print(f"Total time: {total_duration:.2f}s")
    print(f"Average time per request: {avg_time_per_request:.4f}s")
    print(f"Requests per second: {requests_per_second:.2f} req/s")
    print("Detailed metrics saved to dos_attack_metrics.csv")
